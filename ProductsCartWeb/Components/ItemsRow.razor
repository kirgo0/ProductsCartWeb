@inject IJSRuntime _js

@if (Row is not null && Items.Count > 0)
{
    <CascadingValue Value="RowIndex">
        <div class="w-100 relative bg-white px-5 pt-3" @onmouseenter="() => ButtonsVisible = true" @onmouseleave="() => ButtonsVisible = false">
            @if (ButtonsVisible && SelectedItemIndex != Items.Count - 1)
            {
                <div class="-translate-y-1/2 absolute left-4 top-1/2 flex-col justify-center justify-items-center gap-2">
                
                    @if (Items.Count - RightBoundary - 1 > 0) {
                        <div class="text-center">+@(Items.Count - RightBoundary - 1)</div>
                    }
                    <button @onclick="() => Shift(1)">
                        <span class="material-symbols-outlined">
                            arrow_back_ios
                        </span>
                    </button>
                </div>
            }
            @if (ButtonsVisible && SelectedItemIndex != 0)
            {
                <div class="-translate-y-1/2 absolute right-3 top-1/2 flex-col justify-center gap-2">
                    @if (LeftBoundary > 0)
                    {
                        <div class="text-center">+@LeftBoundary</div>
                    }
                    <button @onclick="() => Shift(-1)">
                        <span class="material-symbols-outlined text-center">
                            arrow_forward_ios
                        </span>
                    </button>
                </div>
            }
            @if (ButtonsVisible)
            {
                <div class="z-10 absolute @(!string.IsNullOrEmpty(Row.RowName) || ChangingRowName ? "top-2"  : "-top-1.5") right-20 flex gap-1 rounded-full border border-black bg-white px-2 py-1">
                    @if (Container.Count - 1 > RowIndex)
                    {
                        <!--move down button-->
                        <button class="border-r-0 h-6 w-6 rounded-full text-sm text-gray-900" @onclick="() => OnMoveRowDown.InvokeAsync(Row)">
                            <span class="material-symbols-outlined">
                                keyboard_arrow_down
                            </span>
                        </button>
                    }
                    @if(RowIndex > 0)
                    {
                        <!--move up button-->
                        <button class="border-r-0 h-6 w-6 rounded-full text-sm text-gray-900" @onclick="() => OnMoveRowUp.InvokeAsync(Row)">
                            <span class="material-symbols-outlined">
                                keyboard_arrow_up
                            </span>
                        </button> 
                    }
                    <button class="border-r-0 h-6 w-6 rounded-full bg-red-500 text-sm text-white transition-colors duration-150" @onclick="() => OnDeleteRow.InvokeAsync(Row)">X</button>

                </div>
            }
            <div class="flex h-full flex-col justify-stretch">
                @if (!ChangingRowName && string.IsNullOrEmpty(Row.RowName) && ButtonsVisible)
                {
                    <div class="z-10 absolute left-12 top-0 rounded-full border border-black bg-white py-1 pl-3 pr-2">
                        <!--add category name button-->
                        <button class="text-center" @onclick="async () => {
                            ChangingRowName = true;
                            await ChangeNameInputWidth();
                            await ChangeNameInputFocus();
                        }">
                            Додати ім'я
                            <span class="material-symbols-outlined align-middle">
                                edit
                            </span>
                        </button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(Row.RowName) || ChangingRowName)
                {
                    <div class="relative">
                        <!--category name input-->
                        <input type="text"
                            @ref="nameInput"
                            @oninput="ChangeNameInputWidth" 
                            @onblur="() => ChangingRowName = false" class="outline-0 inline-block w-10"  
                            @bind-value="Row.RowName" 
                            @onclick="() => ChangingRowName = true"
                            placeholder="Ім'я категорії" 
                            autofocus/>
                        <button class="text-center" @onclick="async () => { 
                            ChangingRowName = !ChangingRowName;
                            await ChangeNameInputFocus();
                        }">
                            @if(ChangingRowName)
                            {
                                <span class="material-symbols-outlined align-middle">
                                    check
                                </span>
                            } else
                            {
                                <span class="material-symbols-outlined align-middle">
                                    edit
                                </span>
                            }
                        </button>
                    </div>
                }
                <hr class="mb-3 border-black" />
                <div class="@(MaxVisibleElements == 1 ? "grid-cols-1" : MaxVisibleElements == 2 ? "grid-cols-5" : MaxVisibleElements == 3 ? "grid-cols-7" : MaxVisibleElements == 4 ? "grid-cols-9" : "") grid h-full gap-4">
                    @if (SelectedItemIndex - LeftBoundary < MaxVisibleElements)
                    {
                        for (int i = 0; i < MaxVisibleElements - SelectedItemIndex - LeftBoundary - 1; i++)
                        {
                            <ItemBlock Class="bg-gray-100" Index="-1"></ItemBlock>
                        }
                        <ItemBlock Class="bg-gray-100" Index="-1">
                            <div class="align-items-center flex h-full flex-col justify-center gap-2 rounded-sm transition-all duration-150 ease-in-out @(LeftAddButtonVisible ? "opacity-100 bg-gray-100" : "opacity-0")"
                                 @onmouseenter="() => LeftAddButtonVisible = true"
                                 @onmouseleave="() => LeftAddButtonVisible = false">
                                <button type="button" @onclick="() => InsertAt(0)"
                                        class="me-2 inline-flex items-center rounded-full bg-amber-300 p-3 text-center text-sm font-medium text-white drop-shadow-md transition-colors duration-100 ease-in hover:bg-amber-400 focus:outline-none dark:bg-blue-600 dark:hover:bg-blue-700">
                                    <span class="material-symbols-outlined text-gray-700">
                                        add
                                    </span>
                                </button>
                                <button type="button" @onclick="() => InsertAtByUrl(0)"
                                        class="me-2 inline-flex items-center rounded-full bg-amber-200 p-2 text-center text-sm font-medium text-white drop-shadow-md transition-colors duration-100 ease-in hover:bg-amber-300 focus:outline-none">
                                    <span class="material-symbols-outlined text-gray-700">
                                        add_link
                                    </span>
                                </button>
                            </div>
                        </ItemBlock>
                    }
                    @for (int i = LeftBoundary, j = Math.Abs(SelectedItemIndex - LeftBoundary - MaxVisibleElements) + 2; i < SelectedItemIndex; i++, j++)
                    {
                        <ItemBlock Class="@($"opacity-{j*25}")" Item="Items[i]" Index="i" OnDoubleClickAction="Select" OnDelete="Delete" />
                    }

                    <ItemBlock Class=@($"col-start-{MaxVisibleElements+1}") Item="SelectedItem" Index="SelectedItemIndex" IsSelected="true" OnDelete="Delete" />

                    @for (int i = SelectedItemIndex + 1, j = MaxVisibleElements + 1; i <= RightBoundary; i++, j--)
                    {
                        <ItemBlock Class="@($"opacity-{j*25}")" Item="Items[i]" Index="i" OnDoubleClickAction="Select" OnDelete="Delete" />
                    }
                    @if (RightBoundary - SelectedItemIndex < MaxVisibleElements)
                    {
                        <ItemBlock Class="bg-gray-100" Index="Row.Count">
                            <div class="align-items-center flex h-full flex-col justify-center gap-2 rounded-sm transition-all duration-150 ease-in-out @(RightAddButtonVisible ? "opacity-100 bg-gray-100" : "opacity-0")"
                                 @onmouseenter="() => RightAddButtonVisible = true"
                                 @onmouseleave="() => RightAddButtonVisible = false">
                                <button type="button" @onclick="() => InsertAt(Items.Count)"
                                        class="me-2 inline-flex items-center rounded-full bg-amber-300 p-3 text-center text-sm font-medium text-white drop-shadow-md transition-colors duration-100 ease-in hover:bg-amber-400 focus:outline-none dark:bg-blue-600 dark:hover:bg-blue-700">
                                    <span class="material-symbols-outlined text-gray-700">
                                        add
                                    </span>
                                </button>
                                <button type="button" @onclick="() => InsertAtByUrl(Items.Count)"
                                        class="me-2 inline-flex items-center rounded-full bg-amber-200 p-2 text-center text-sm font-medium text-white drop-shadow-md transition-colors duration-100 ease-in hover:bg-amber-300 focus:outline-none">
                                    <span class="material-symbols-outlined text-gray-700">
                                        add_link
                                    </span>
                                </button>
                            </div>
                        </ItemBlock>
                        @for (int i = 0; i < MaxVisibleElements - (RightBoundary - SelectedItemIndex) - 1; i++)
                        {
                            <ItemBlock Class="bg-gray-100" Index="Row.Count"></ItemBlock>
                        }

                    }
                </div>
            </div>
        </div>
    </CascadingValue>
}


@code {
    private bool LeftAddButtonVisible = false;
    private bool RightAddButtonVisible = false;
    private bool ButtonsVisible = false;
    private bool ChangingRowName = false;

    private ElementReference nameInput { get; set; }

    private int MaxVisibleElements = 2;

    private int LeftBoundary =>
    SelectedItemIndex - MaxVisibleElements > 0 ?
    SelectedItemIndex - MaxVisibleElements : 0;

    private int RightBoundary =>
    SelectedItemIndex + MaxVisibleElements <= Items.Count - 1 ?
    SelectedItemIndex + MaxVisibleElements : Items.Count - 1;

    [Parameter]
    public ItemRowDTO Row { get; set; }
    [Parameter]
    public int RowIndex { get; set; }
    [Parameter]
    public EventCallback<ItemRowDTO> OnDeleteRow { get; set; }
    [Parameter]
    public EventCallback<ItemRowDTO> OnMoveRowUp { get; set; }
    [Parameter]
    public EventCallback<ItemRowDTO> OnMoveRowDown { get; set; }
    [CascadingParameter]
    public ItemsContainer Container { get; set; }

    public ItemDTO SelectedItem { get => Row.SelectedItem; }
    public int SelectedItemIndex { get => Row.SelectedItemIndex; set => Row.SelectedItemIndex = value; }
    public List<ItemDTO> Items { get => Row.Items; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Row is not null && !Row.Items.Any() && Row.SelectedItemIndex == -1) return;
            var index = Items.Count / 2;
            SelectedItemIndex = index;
            StateHasChanged();
        }
    }

    protected void Shift(int shift)
    {
        var moveResult = SelectedItemIndex + shift;
        if (moveResult >= 0 && moveResult < Items.Count)
        {
            SelectedItemIndex = moveResult;
            StateHasChanged();
        }
    }

    protected void Select(int index)
    {
        if (index >= 0 && index < Items.Count)
        {
            SelectedItemIndex = index;
            StateHasChanged();
        }
    }

    private async Task Delete(ItemDTO product)
    {
        if (Items.Contains(product))
        {
            var index = Items.IndexOf(product);
            Items.Remove(product);
            if (Items.Count == 0)
            {
                await OnDeleteRow.InvokeAsync(Row);
                return;
            }
            if (index <= SelectedItemIndex && SelectedItemIndex != 0)
            {
                SelectedItemIndex--;
            }
            StateHasChanged();
        }
    }

    private void InsertAt(int index)
    {
        if (index < 0 || index > Items.Count) return;
        var newProduct = new ItemDTO
            {
                Id = Guid.NewGuid().ToString(),
                Name = "New Product",
                Description = "Description",
                Price = 0.0
            };

        Items.Insert(index, newProduct);
        if (index <= SelectedItemIndex) SelectedItemIndex++;
        StateHasChanged();
    }

    private async Task InsertAtByUrl(int index)
    {
        if (index < 0 || index > Items.Count) return;
        var userUrl = await _js.InvokeAsync<string>("navigator.clipboard.readText");
        if (!Uri.TryCreate(userUrl, UriKind.Absolute, out var uriResult))
        {
            return;
        }
        var newProduct = new ItemDTO
            {
                Id = Guid.NewGuid().ToString(),
                Name = "New Product",
                Description = userUrl,
                Price = 0.0
            };

        Items.Insert(index, newProduct);
        if (index <= SelectedItemIndex) SelectedItemIndex++;
        StateHasChanged();
    }

    private async Task ChangeNameInputWidth()
    {
        if(nameInput.Context is not null)
            await _js.InvokeVoidAsync("adjustWidthOfInput", nameInput);
        // StateHasChanged();
    }

    private async Task ChangeNameInputFocus()
    {
        if(nameInput.Context is not null)
            await nameInput.FocusAsync();
    }
}
