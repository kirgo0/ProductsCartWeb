@inject IProductRepository ProductsRepository
@page "/"
@using ProductsCartWeb.Repository.Interfaces

<div>
    <div>
        <p>Total Price: @TotalPrice</p>
    </div>
    <ItemsContainer ItemRows="ItemRows">
        <div class="grid auto-rows-fr pb-4">
            @for (int i = 0; i < ItemRows.Count; i++)
            {
                <ItemsRow Row="ItemRows[i]" OnDeleteRow="DeleteRow" OnMoveRowUp="MoveRowUp" OnMoveRowDown="MoveRowDown" RowIndex="i"></ItemsRow>
            }
            <div class="flex justify-center pt-3">
                <button @onclick="AddRow" type="button" class="ring-0 outline-0 mb-2 me-2 rounded-lg border border-amber-400 px-5 py-2.5 text-center text-sm font-medium text-gray-900 transition-colors duration-100 ease-in-out hover:text-white hover:bg-amber-300 focus:outline-0">Додати</button>
            </div>
        </div>
    </ItemsContainer>
</div>

@code {
    List<ItemRowDTO> ItemRows = new();

    public double TotalPrice => 0;

    protected override async Task OnInitializedAsync()
    {
        ItemRows.Add(new ItemRowDTO((await ProductsRepository.GetAllAsync()).Take(1).ToList().Adapt<List<ItemDTO>>()));
        ItemRows.Add(new ItemRowDTO((await ProductsRepository.GetAllAsync()).Take(2).ToList().Adapt<List<ItemDTO>>()));
        ItemRows.Add(new ItemRowDTO((await ProductsRepository.GetAllAsync()).Take(3).ToList().Adapt<List<ItemDTO>>()));
        ItemRows.Add(new ItemRowDTO((await ProductsRepository.GetAllAsync()).Take(4).ToList().Adapt<List<ItemDTO>>()));
        ItemRows.Add(new ItemRowDTO((await ProductsRepository.GetAllAsync()).Take(5).ToList().Adapt<List<ItemDTO>>()));
        ItemRows.Add(new ItemRowDTO((await ProductsRepository.GetAllAsync()).Adapt<List<ItemDTO>>()));
        await base.OnInitializedAsync();
    }

    private void AddRow()
    {
        ItemRows.Add(
            new ItemRowDTO(
                new List<ItemDTO>
                {
                new ItemDTO { Id = Guid.NewGuid().ToString(), Name = "New Product", Description = "Description", Price = 0.0 }
                }
            )
        );

        StateHasChanged();
    }

    private void DeleteRow(ItemRowDTO row)
    {
        if (ItemRows.Contains(row))
        {
            ItemRows.Remove(row);
        }
    }

    private void MoveRowUp(ItemRowDTO row)
    {
    }

    private void MoveRowDown(ItemRowDTO row)
    {

    }
}