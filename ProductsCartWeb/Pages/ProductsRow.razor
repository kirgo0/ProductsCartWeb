<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

<div class="grid-cols-7 grid gap-4" @onmouseenter="ShowAddProductButton" @onmouseleave="HideAddProductButton">
    @if(SelectedProductIndex-LeftBoundary < MaxVisibleElements)
    {
        for (int i = 0; i < MaxVisibleElements - SelectedProductIndex - LeftBoundary; i++)
        {
            <div> </div>
        }
    }
    @for (int i = LeftBoundary, j = Math.Abs(SelectedProductIndex - LeftBoundary - MaxVisibleElements) + 2; i < SelectedProductIndex; i++, j++)
    { 
        <ProductBlock Class="@($"opacity-{j*25}")" Product="Products[i]" />
    }
    <ProductBlock Class=@($"col-start-{MaxVisibleElements+1}") Product="Products[SelectedProductIndex]" IsSelected="true" />
    @for (int i = SelectedProductIndex + 1, j = MaxVisibleElements+1; i <= RightBoundary; i++, j--)
    {
        <ProductBlock Class="@($"opacity-{j*25}")" Product="Products[i]" />
    }
        @if(RightBoundary - SelectedProductIndex < MaxVisibleElements)
        {
            <div class="align-items-center flex flex-col justify-center gap-4 transition-all duration-150 ease-in-out @(AddButtonVisible ? "opacity-100" : "opacity-0")">
                <button type="button" class="me-2 inline-flex items-center rounded-full bg-amber-300 p-4 text-center text-sm font-medium text-white drop-shadow-md transition-colors duration-100 ease-in hover:bg-amber-400 focus:outline-none dark:bg-blue-600 dark:hover:bg-blue-700">
                    <span class="material-symbols-outlined text-gray-700">
                        add
                    </span>
                </button>
                <button type="button" class="me-2 inline-flex items-center rounded-full bg-amber-200 p-2 text-center text-sm font-medium text-white drop-shadow-md transition-colors duration-100 ease-in hover:bg-amber-300 focus:outline-none">
                    <span class="material-symbols-outlined text-gray-700">
                        add_link
                    </span>
                </button>
            </div>
        }
</div>


@code {
    private bool AddButtonVisible = false;

    private int MaxVisibleElements = 3;
    private int LeftBoundary => 
    SelectedProductIndex - MaxVisibleElements > 0 ? 
    SelectedProductIndex - MaxVisibleElements : 0;
    private int RightBoundary => 
    SelectedProductIndex + MaxVisibleElements <= Products.Count - 1 ? 
    SelectedProductIndex + MaxVisibleElements : Products.Count - 1;

    [Parameter]
    public List<Product> Products { get; set; } = new();

    public Product SelectedProduct { get; set; }

    public int SelectedProductIndex { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            if (!Products.Any()) return;
            var index = Products.Count / 2;
            SelectedProduct = Products[index];
            SelectedProductIndex = index;
            StateHasChanged();
        }
    }

    protected void Move(int shift)
    {
        var moveResult = SelectedProductIndex + shift;
        if(moveResult > 0 && moveResult < Products.Count - 1)
        {
            SelectedProduct = Products[moveResult];
            SelectedProductIndex = moveResult;
            StateHasChanged();
        }
    }

    private void AddProduct()
    {
        var newProduct = new Product
            {
                Id = Guid.NewGuid().ToString(),
                Name = "New Product",
                Description = "Description",
                Price = 0.0
            };

        Products.Insert(SelectedProductIndex + 1, newProduct);
        SelectedProduct = newProduct;
        SelectedProductIndex = SelectedProductIndex + 1;
        StateHasChanged();
    }

    private void ShowAddProductButton()
    {
        AddButtonVisible = true;
    }

    private void HideAddProductButton()
    {
        AddButtonVisible = false;
    }
}
