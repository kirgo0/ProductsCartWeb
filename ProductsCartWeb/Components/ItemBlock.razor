
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@40,400,0,0" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

<div draggable="true" class="@Class @(Item is null ? "" : IsSelected ? "bg-amber-200" : "bg-gray-200") relative rounded p-3 shadow-sm"
    ondragover="event.preventDefault();"
    @ondblclick="async () => await OnDoubleClickAction.InvokeAsync(Index)"
    @ondrag="StartDrag"
    @ondrop="Drop" 
    @onmouseenter="() => ShowDeleteBtn = true" 
    @onmouseleave="() => ShowDeleteBtn = false">
    @if (Item is not null)
    {
        @if(ShowDeleteBtn)
        {
            <button class="border-r-0 absolute -right-3 -top-3 h-7 w-7 rounded-full bg-red-500 text-white transition-colors duration-150" @onclick="Delete">X</button>
        }
        <div class="flex h-full flex-col justify-between">
            <div class="w-full">
                <div class="font-bold">@(Item.Name)</div>
                <div class="text-balance break-words text-xs">@(Item.Description)</div>
            </div>
            <div>@Item.Price UAH</div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public ItemDTO Item { get; set; }

    [Parameter]
    public bool IsSelected { get; set; } = false;

    [Parameter]
    public int Index { get; set; } = 0;
    [Parameter]
    public EventCallback<int> OnDoubleClickAction { get; set; }
    [Parameter]
    public EventCallback<ItemDTO> OnDelete { get; set; }
    [Parameter]
    public EventCallback<DragAndDropEventArgs> OnDrop { get; set; }

    private bool ShowDeleteBtn { get; set; } = false;

    private async Task Drop()
    {
        if(Item is not null)
        {
            await OnDrop.InvokeAsync(new DragAndDropEventArgs(Index, Item, async () => await Delete()));
        }
    }

    private void StartDrag()
    {
        Console.WriteLine("_START__");
    }

    private async Task Delete()
    {
        if (Item is not null)
        {
            await OnDelete.InvokeAsync(Item);
        }
    }
}
