<div class="@Class @(Item is null ? "" : IsSelected ? "bg-amber-200" : "bg-gray-200") relative rounded p-3 shadow-sm"
    @ondblclick="async () => await OnDoubleClickAction.InvokeAsync(Index)"
    @onmouseenter="() => ButtonsVisible = true" 
    @onmouseleave="() => ButtonsVisible = false"
    draggable="@(ChildContent is null && Item is not null? "true" : "false")"
    ondragover="event.preventDefault();"
    @ondrop="HandleDrop" 
    @ondragenter="HandleDragEnter"
    @ondragleave="HandleDragLeave"
    @ondragstart="HandleDragStart"
>
    @if (ChildContent is not null)
    {
        @ChildContent
    } else if (Item is not null)
    {
        @if(ButtonsVisible)
        {
            <button class="border-r-0 absolute -right-3 -top-3 h-7 w-7 rounded-full bg-red-500 text-white transition-colors duration-150" @onclick="Delete">X</button>
        }
        <div class="flex h-full flex-col justify-between">
            <div class="w-full">
                <div class="font-bold">@(Item.Name)</div>
                <div class="text-balance break-words text-xs">@(Item.Description)</div>
            </div>
            <div>@Item.Price UAH</div>
        </div>
    }
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public ItemDTO Item { get; set; }
    [Parameter]
    public bool IsSelected { get; set; } = false;
    [Parameter]
    public int Index { get; set; } = 0;
    [CascadingParameter]
    public int RowIndex { get; set; }
    [Parameter]
    public EventCallback<int> OnDoubleClickAction { get; set; }
    [Parameter]
    public EventCallback<ItemDTO> OnDelete { get; set; }
    [CascadingParameter]
    public ItemsContainer Container { get; set; }

    private bool ButtonsVisible { get; set; } = false;


    private async Task Delete()
    {
        if (Item is not null)
        {
            await OnDelete.InvokeAsync(Item);
        }
    }

    #region drag_n_drop
    // if block is used as dropzone

    private void HandleDragEnter()
    {
    }

    private void HandleDragLeave()
    {
    }

    private async Task HandleDrop()
    {
        Container.DragAndDropEventArgs.RowToIndex = RowIndex;
        Container.DragAndDropEventArgs.ItemToIndex = Index;
        if(Container.TryMoveItem())
        {
            StateHasChanged();
        }
    }

    // if block is used as draggable element
    private void HandleDragStart()
    {
        Container.DragAndDropEventArgs = new()
        {
            RowFromIndex = RowIndex,
            ItemFromIndex = Index
        };
    }

    #endregion
}
